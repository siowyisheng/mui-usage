{"version":3,"sources":["theme.tsx","Button.tsx","NestedSelector.tsx","StylesFromProps.tsx","LandingView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["theme","createMuiTheme","palette","primary","purple","secondary","main","useStyles","makeStyles","root","background","border","borderRadius","boxShadow","color","height","padding","Button","classes","react_default","a","createElement","className","& p","& span","NestedSelector","_ref","Paper","clsx","foo","props","width","backgroundColor","StylesFromProps","_useState","useState","_useState2","Object","slicedToArray","setColor","concat","type","value","onChange","e","target","maxWidth","card","margin","spacing","cards","title","description","LandingView","useTheme","console","log","core_browser_esm","css","minHeight","display","alignItems","flexWrap","flexDirection","justifyContent","fontSize","Typography","variant","map","Card","CardContent","gutterBottom","component","CardActions","size","Button_Button","marginTop","App","ThemeProvider","customTheme","src_LandingView","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5b613b15.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core/styles'\nimport purple from '@material-ui/core/colors/purple'\n\nexport const theme = createMuiTheme({\n  palette: {\n    primary: purple,\n    secondary: {\n      main: '#f44336'\n    }\n  }\n})\n","import React from 'react'\nimport { makeStyles } from '@material-ui/styles'\nimport MuiButton from '@material-ui/core/Button'\n\nconst useStyles = makeStyles({\n  root: {\n    background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n    border: 0,\n    borderRadius: 3,\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n    color: 'white',\n    height: 48,\n    padding: '0 30px'\n  }\n})\n\nexport default function Button() {\n  const classes = useStyles()\n  return <MuiButton className={classes.root}>My Button</MuiButton>\n}\n","import React from 'react'\nimport { makeStyles } from '@material-ui/styles'\nimport Paper from '@material-ui/core/Paper'\nimport { Theme } from '@material-ui/core'\nimport clsx from 'clsx'\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    padding: 16,\n    color: theme.palette.primary.main,\n    '& p': {\n      color: 'green',\n      '& span': {\n        color: 'blue'\n      }\n    }\n  }\n}))\n\nexport default function NestedSelector({ className }: { className?: string }) {\n  const classes = useStyles()\n\n  return (\n    <Paper className={clsx(classes.root, className)}>\n      This is red since it is inside the paper.\n      <p>\n        This is green since it is inside the paragraph{' '}\n        <span>and this is blue since it is inside the span</span>\n      </p>\n    </Paper>\n  )\n}\n","import React, { useState } from 'react'\nimport { makeStyles } from '@material-ui/styles'\nimport { Paper } from '@material-ui/core'\n\nconst useStyles = makeStyles({\n  foo: (props: { color: string }) => ({\n    width: 500,\n    height: 200,\n    backgroundColor: props.color\n  })\n})\n\nexport function StylesFromProps({ className }: { className?: string }) {\n  const [color, setColor] = useState('black')\n  const classes = useStyles({ color })\n  return (\n    <Paper className={`${classes.foo} ${className}`}>\n      <input\n        type='text'\n        value={color}\n        onChange={e => setColor(e.target.value)}\n      />\n    </Paper>\n  )\n}\n","/** @jsx jsx */\nimport { jsx } from '@emotion/core'\nimport React, { useEffect, useState } from 'react'\nimport red from '@material-ui/core/colors/red'\nimport sample from 'lodash/sample'\nimport {\n  Button as MuiButton,\n  Color,\n  Paper,\n  Theme,\n  Typography,\n  Card,\n  CardContent,\n  CardActions,\n  useTheme\n} from '@material-ui/core'\nimport Button from './Button'\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom'\nimport NestedSelector from './NestedSelector'\nimport { StylesFromProps } from './StylesFromProps'\nimport { makeStyles } from '@material-ui/styles'\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    padding: 16,\n    maxWidth: 600\n  },\n  card: {\n    maxWidth: 250,\n    margin: theme.spacing(3)\n  }\n}))\n\nconst cards = [\n  {\n    title: 'Nested Selectors',\n    description: 'One easy way to style elements within MuiComponents.'\n  },\n  {\n    title: 'Styles from props',\n    description: 'Create dynamic styles using props.'\n  }\n]\n\nconst possibleShades = [\n  '50',\n  '100',\n  '200',\n  '300',\n  '400',\n  '500',\n  '600',\n  '700',\n  '800',\n  '900',\n  'A100',\n  'A200',\n  'A400',\n  'A700'\n]\n\nconst LandingView: React.FC = () => {\n  const classes = useStyles()\n  const theme = useTheme()\n  console.log(theme)\n  return (\n    <div\n      css={{\n        backgroundColor: '#ffe',\n        minHeight: '100vh',\n        display: 'flex',\n        alignItems: 'center',\n        flexWrap: 'wrap',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        fontSize: 'calc(10px + 2vmin)'\n      }}\n    >\n      <Typography variant='h1'>Material UI usage</Typography>\n      <div css={{ display: 'flex' }}>\n        {cards.map(card => (\n          <Card className={classes.card}>\n            <CardContent>\n              <Typography color='textSecondary' gutterBottom>\n                {card.title}\n              </Typography>\n              <Typography variant='body2' component='p'>\n                {card.description}\n              </Typography>\n            </CardContent>\n            <CardActions>\n              <MuiButton size='small'>Learn</MuiButton>\n            </CardActions>\n          </Card>\n        ))}\n      </div>\n      <Paper classes={classes}>\n        <Typography>First, we create a theme with createMuiTheme.</Typography>\n        <Typography>\n          The theme allows us to configure Mui components globally. We can:\n        </Typography>\n        <Typography>- override default styles.</Typography>\n        <Typography>- provide default props.</Typography>\n        <Typography>- change primary, secondary and error colors.</Typography>\n        <Typography>- change fonts.</Typography>\n        <Typography>\n          We pass our created theme to ThemeProvider, which we will wrap around\n          the entire app. When we want to override styling, we can makeStyles to\n          create a hook, useStyles, which when run, returns `classes` which we\n          can pass into the customized components.\n        </Typography>\n      </Paper>\n      <Button />\n      <MuiButton color='primary' variant='contained'>\n        Just a button\n      </MuiButton>\n      <NestedSelector css={{ marginTop: 8 }} />\n      <StylesFromProps css={{ marginTop: 8 }} />\n    </div>\n  )\n}\nexport default LandingView\n","/** @jsx jsx */\nimport { jsx } from '@emotion/core'\nimport React, { useEffect, useState } from 'react'\nimport red from '@material-ui/core/colors/red'\nimport sample from 'lodash/sample'\nimport {\n  Button as MuiButton,\n  Color,\n  Paper,\n  Theme,\n  Typography,\n  Card,\n  CardContent,\n  CardActions,\n  useTheme\n} from '@material-ui/core'\nimport Button from './Button'\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom'\nimport NestedSelector from './NestedSelector'\nimport { StylesFromProps } from './StylesFromProps'\nimport { ThemeProvider, makeStyles } from '@material-ui/styles'\nimport { theme as customTheme } from './theme'\nimport LandingView from './LandingView'\n\nconst App: React.FC = () => {\n  // const [shade, setShade] = useState<keyof Color>(500)\n  // const possibleNewShades = possibleShades.filter(_shade => _shade !== shade)\n  // useEffect(() => {\n  //   const interval = setInterval(\n  //     () => setShade(sample(possibleNewShades) as keyof Color),\n  //     500\n  //   )\n  //   return () => clearInterval(interval)\n  // })\n  // const color = red[shade]\n  return (\n    <ThemeProvider theme={customTheme}>\n      <LandingView />\n    </ThemeProvider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport 'typeface-roboto'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}