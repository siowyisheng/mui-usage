{"version":3,"sources":["logo.svg","Button.tsx","NestedSelector.tsx","StylesFromProps.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","useStyles","makeStyles","root","background","border","borderRadius","boxShadow","color","height","padding","Button","classes","react_default","a","createElement","className","& p","& span","NestedSelector","_ref","Paper","concat","foo","props","width","backgroundColor","StylesFromProps","_useState","useState","_useState2","Object","slicedToArray","setColor","type","value","onChange","e","target","possibleShades","App","shade","setShade","possibleNewShades","filter","_shade","useEffect","interval","setInterval","sample","clearInterval","red","core_browser_esm","css","minHeight","display","flexDirection","alignItems","justifyContent","fontSize","src","logo","alt","Button_Button","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,gSCIlCC,EAAYC,YAAW,CAC3BC,KAAM,CACJC,WAAY,mDACZC,OAAQ,EACRC,aAAc,EACdC,UAAW,wCACXC,MAAO,QACPC,OAAQ,GACRC,QAAS,YAIE,SAASC,IACtB,IAAMC,EAAUX,IAChB,OAAOY,EAAAC,EAAAC,cAACJ,EAAA,EAAD,CAAWK,UAAWJ,EAAQT,MAA9B,0BCdHF,EAAYC,YAAW,CAC3BC,KAAM,CACJO,QAAS,GACTF,MAAO,MACPS,MAAO,CACLT,MAAO,QACPU,SAAU,CACRV,MAAO,YAMA,SAASW,EAATC,GAA+D,IAArCJ,EAAqCI,EAArCJ,UACjCJ,EAAUX,IAEhB,OACEY,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAOL,UAAS,GAAAM,OAAKV,EAAQT,KAAb,KAAAmB,OAAqBN,IAArC,4CAEEH,EAAAC,EAAAC,cAAA,0DACiD,IAC/CF,EAAAC,EAAAC,cAAA,8DCrBR,IAAMd,EAAYC,YAAW,CAC3BqB,IAAK,SAACC,GAAD,MAA+B,CAClCC,MAAO,IACPhB,OAAQ,IACRiB,gBAAiBF,EAAMhB,UAIpB,SAASmB,EAATP,GAAgE,IAArCJ,EAAqCI,EAArCJ,UAAqCY,EAC3CC,mBAAS,SADkCC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC9DpB,EAD8DsB,EAAA,GACvDG,EADuDH,EAAA,GAE/DlB,EAAUX,EAAU,CAAEO,UAC5B,OACEK,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAOL,UAAS,GAAAM,OAAKV,EAAQW,IAAb,KAAAD,OAAoBN,IAClCH,EAAAC,EAAAC,cAAA,SACEmB,KAAK,OACLC,MAAO3B,EACP4B,SAAU,SAAAC,GAAC,OAAIJ,EAASI,EAAEC,OAAOH,WCPzC,IAAMI,EAAiB,CACrB,KACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,OACA,OACA,QAqCaC,EAlCO,WAAM,IAAAZ,EACAC,mBAAsB,KADtBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACnBa,EADmBX,EAAA,GACZY,EADYZ,EAAA,GAEpBa,EAAoBJ,EAAeK,OAAO,SAAAC,GAAM,OAAIA,IAAWJ,IACrEK,oBAAU,WACR,IAAMC,EAAWC,YACf,kBAAMN,EAASO,IAAON,KACtB,KAEF,OAAO,kBAAMO,cAAcH,MAE7B,IAAMvC,EAAQ2C,IAAIV,GAClB,OACEV,OAAAqB,EAAA,EAAArB,CAAA,OAAKf,UAAU,OACbe,OAAAqB,EAAA,EAAArB,CAAA,UACEsB,IAAK,CACH3B,gBAAiBlB,EACjB8C,UAAW,QACXC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,eAAgB,SAChBC,SAAU,qBACVnD,MAAO,UAGTuB,OAAAqB,EAAA,EAAArB,CAAA,OAAK6B,IAAKC,IAAM7C,UAAU,WAAW8C,IAAI,SACzC/B,OAAAqB,EAAA,EAAArB,CAACgC,EAAD,MACAhC,OAAAqB,EAAA,EAAArB,CAACZ,EAAD,CAAgBkC,IAAK,CAAEW,UAAW,KAClCjC,OAAAqB,EAAA,EAAArB,CAACJ,EAAD,CAAiB0B,IAAK,CAAEW,UAAW,QC9CvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.92ef0a9a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport { makeStyles } from '@material-ui/styles'\nimport MuiButton from '@material-ui/core/Button'\n\nconst useStyles = makeStyles({\n  root: {\n    background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n    border: 0,\n    borderRadius: 3,\n    boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n    color: 'white',\n    height: 48,\n    padding: '0 30px'\n  }\n})\n\nexport default function Button() {\n  const classes = useStyles()\n  return <MuiButton className={classes.root}>My Button</MuiButton>\n}\n","import React from 'react'\nimport { makeStyles } from '@material-ui/styles'\nimport Paper from '@material-ui/core/Paper'\n\nconst useStyles = makeStyles({\n  root: {\n    padding: 16,\n    color: 'red',\n    '& p': {\n      color: 'green',\n      '& span': {\n        color: 'blue'\n      }\n    }\n  }\n})\n\nexport default function NestedSelector({ className }: { className?: string }) {\n  const classes = useStyles()\n\n  return (\n    <Paper className={`${classes.root} ${className}`}>\n      This is red since it is inside the paper.\n      <p>\n        This is green since it is inside the paragraph{' '}\n        <span>and this is blue since it is inside the span</span>\n      </p>\n    </Paper>\n  )\n}\n","import React, { useState } from 'react'\nimport { makeStyles } from '@material-ui/styles'\nimport { Paper } from '@material-ui/core'\n\nconst useStyles = makeStyles({\n  foo: (props: { color: string }) => ({\n    width: 500,\n    height: 200,\n    backgroundColor: props.color\n  })\n})\n\nexport function StylesFromProps({ className }: { className?: string }) {\n  const [color, setColor] = useState('black')\n  const classes = useStyles({ color })\n  return (\n    <Paper className={`${classes.foo} ${className}`}>\n      <input\n        type='text'\n        value={color}\n        onChange={e => setColor(e.target.value)}\n      />\n    </Paper>\n  )\n}\n","/** @jsx jsx */\nimport { jsx } from '@emotion/core'\nimport React, { useEffect, useState } from 'react'\nimport logo from './logo.svg'\nimport './App.css'\nimport red from '@material-ui/core/colors/red'\nimport sample from 'lodash/sample'\nimport { Color } from '@material-ui/core'\nimport Button from './Button'\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom'\nimport NestedSelector from './NestedSelector'\nimport { StylesFromProps } from './StylesFromProps'\n\nconst possibleShades = [\n  '50',\n  '100',\n  '200',\n  '300',\n  '400',\n  '500',\n  '600',\n  '700',\n  '800',\n  '900',\n  'A100',\n  'A200',\n  'A400',\n  'A700'\n]\n\nconst App: React.FC = () => {\n  const [shade, setShade] = useState<keyof Color>(500)\n  const possibleNewShades = possibleShades.filter(_shade => _shade !== shade)\n  useEffect(() => {\n    const interval = setInterval(\n      () => setShade(sample(possibleNewShades) as keyof Color),\n      500\n    )\n    return () => clearInterval(interval)\n  })\n  const color = red[shade]\n  return (\n    <div className='App'>\n      <header\n        css={{\n          backgroundColor: color,\n          minHeight: '100vh',\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n          fontSize: 'calc(10px + 2vmin)',\n          color: 'white'\n        }}\n      >\n        <img src={logo} className='App-logo' alt='logo' />\n        <Button />\n        <NestedSelector css={{ marginTop: 8 }} />\n        <StylesFromProps css={{ marginTop: 8 }} />\n      </header>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}